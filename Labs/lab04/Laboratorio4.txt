Bruno Pedrazza – 1412933
Gerald Cohn – 1711601

1) 
   Elabore três programas I/O bound que não terminem (loop de msgs no vídeo).
   -   Elabore um programa controlador que seja capaz de executar os 3 programas indicados anteriormente e que simule o compartilhamento da CPU entre os 3 processos com escalonamento Round-Robin com uma fatia de tempo de 1 segundo para o primeiro processo e de 2 segundos para os demais processos. Execute os programas e relate o que aconteceu.
-----------------------------------------------------
ARQUIVO.C

Programa controlador:

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>


int main (void) {

	pid_t pid1, pid2, pid3;
	pid_t vp[3];
	
	if((pid1 = fork()) < 0) {
		printf("Erro no fork 1\n");
		exit(1);
	}
	
	else if(pid1 == 0) {
		execv("ex1a", NULL);
	}
	else {
		if((pid2=fork()) < 0) {
			printf("Erro no fork 1\n");
			exit(1);
		}
		else if(pid2 == 0) {
			execv("ex1b", NULL);
		}
		else {
			if((pid3 = fork()) < 0) {
				printf("Erro no fork 1\n");
				exit(1);
			}	
			else if(pid3 == 0) {
				execv("ex1c", NULL);
			}
			else {

				vp[0] = pid1;
				vp[1] = pid2;
				vp[2] = pid3;
				
				kill(pid1, SIGSTOP);
				kill(pid2, SIGSTOP);
				kill(pid3, SIGSTOP);
				
				while(1) {
				
					kill(vp[0], SIGCONT);
					sleep(1);
					kill(vp[0], SIGSTOP);
					
					kill(vp[1], SIGCONT);
					sleep(2);
					kill(vp[1], SIGSTOP);
					
					kill(vp[2], SIGCONT);
					sleep(2);
					kill(vp[2], SIGSTOP);					
				}

			}
		}
	}
	
	return 0;
}

Processo a:

#include <stdio.h>


int main() {

	while(1) {
		printf("Dentro do a.\n");
	}
	return 0;
}

Processo b:

#include <stdio.h>


int main() {

	while(1) {
		printf("Dentro do b.\n");
	}
	return 0;
}

Processo c:

#include <stdio.h>


int main() {

	while(1) {
		printf("Dentro do c.\n");
	}
	return 0;
}


-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -Wall -o ex1 ex1.c
$ gcc -Wall -o ex1a ex1a.c
$ gcc -Wall -o ex1b ex1b.c
$ gcc -Wall -o ex1c ex1c.c
$./ex1

-----------------------------------------------------
RESULTADO

Dentro de a. (1 segundo)
.
.
.
Dentro de b. (2 segundos)
.
.
.
.
.
.
Dentro de c. (2 segundos)
.
.
.
.
.
.

(Repete infinitamente)


-----------------------------------------------------
CONCLUSÃO
	
	O programa controlador chama os 3 programas complementares a partir da funcao execv. Isso é feito pela substituição do respectivo filho pelo programa auxiliar.
	Primeiramente dentro do processo pai enviamos o sinal SIGSTOP para os tres processos, para depois utilizar o escalonamento round-robin, alternando a execução dos tres processos infinitamente. Como solicitado, o processo "a" executa por 1 segundo e os outros dois por 2 segundos.

	
_______________________________________________________________________________________________________
 
2)
  Faça dois programas que se comunicam através de memória compartilhada: o Pwriter e o Preader, onde este último imprime o valor da shmem na tela.
  Onde o Pwriter fica em loop + sleep e apenas algumas vezes atualiza a memória compartilhada.
   - Use o sinal SIGUSR1 para que o Pwriter anuncie para o Preader de que a memória conjunta foi atualizada.
   - E use o SIGUSR2 para que o Preader confirme ao Pwriter que a atualizacão foi processada e impressa.
-----------------------------------------------------
ARQUIVO.C

Preader:

#include<sys/ipc.h> 
#include<sys/shm.h>
#include<sys/stat.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
#include <signal.h>

void le (int signal);

int main (void){ 

	int seg1, seg2; 
	int *m1;
	pid_t *pidaux, pid;
	
	seg1 = shmget (8600, sizeof(int), S_IRUSR | S_IWUSR);
	seg2 = shmget (8950, sizeof(pid_t), S_IRUSR | S_IWUSR);
	
	if(seg1 == -1) {
		printf("Erro\n");
		exit(1);
	}
	
	// associa a memória compartilhada ao processo
	m1 = (int *) shmat (seg1, 0, 0);
	pidaux = (pid_t *) shmat (seg2, 0, 0);
	pid = *pidaux;
	
	signal(SIGUSR2, le);
	printf("%d\n",*m1);
	sleep(2);
	kill(pid,SIGUSR2);
	

	// libera a memória compartilhada do processo
	shmdt (m1);
	shmdt (pidaux);

	// libera a memória compartilhada
	shmctl (seg1, IPC_RMID, 0); 
	shmctl (seg2, IPC_RMID, 0); 

	return 0;
}

void le (int signal){
    puts("Atualizacao foi processada e impressa.\n");
    exit(0);  
}


Pwriter:

#include<sys/ipc.h> 
#include<sys/shm.h>
#include<sys/stat.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

void escreve (int signal);

int main (void){
 
	int seg1, seg2; 
	int *m1;
	pid_t pid, *pidaux;
	
	pid = getpid();
	// aloca a memória compartilhada
	seg1 = shmget (8600, sizeof(int), IPC_CREAT | IPC_EXCL |  S_IRUSR | S_IWUSR);
	seg2 = shmget (8950, sizeof(pid_t), IPC_CREAT | IPC_EXCL |  S_IRUSR | S_IWUSR);
	 
	m1 = (int *) shmat (seg1, 0, 0);
	pidaux = (pid_t *) shmat (seg2, 0, 0);
	
	*pidaux = pid;
	
	if(seg1 == -1) {
		   printf("Erro\n");
		   exit(1);
	   }
	   
	*m1= 10;
	
	while(1){
	
	   (*m1)++;
	   signal(SIGUSR1, escreve);
	   sleep(2);

	   kill(pid,SIGUSR1);
      
   }
	
	// libera a memória compartilhada do processo
	//shmdt (m1);
	//shmdt (pidaux);

	return 0;
} 

void escreve (int signal){
    puts("Memoria foi atualizada.\n");
    exit(0);  
}


-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -Wall -o Pwriter Pwriter.c
$ gcc -Wall -o Preader Preader.c
$./Pwriter

-----------------------------------------------------
RESULTADO

Resultado não atingiu o esperado.

Memoria foi atualizada.
11

-----------------------------------------------------
CONCLUSÃO

	Como solicitado, tentamos executar o código com 2 programas que se comunicam a partir da memória compartilhada. No laboratório já tivemos alguns problemas para compilar o código e não conseguimos solucionar com a ajuda do professor e do monitor. Tentando novamente em casa, conseguimos fazer o código rodar colocando o pid do Pwriter também na memória e referenciando o kill para ele. Entretanto, não conseguimos fazer a atualização do valor pelo Pwriter.

   
__________________________________________________________________________________________
   
3) 
   Faça um sistema multi-processos similar ao exercicio anterior:

   - Preader deve ler periodicamente o valor na memória compartilhada e usa este para multiplicar um valor sequencial que ele vai gerando, p.ex. Sh_mem está com valor 5, então output de Preader seria: a sequência infinita 5,10,15,20,....

   - Quando Pwriter for alterar o valor na Sh_mem, envia primeiro um SIGSTOP para Preader, alterna o valor e envia o sinal SIGCONT para Preader, que então retoma o ouput utilizando agora o multiplicador atualizado.
-----------------------------------------------------
ARQUIVO.C

Controlador:

#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>


int main (void) {

	pid_t pid1, pid2;
	pid_t vp[2];
	
	if((pid1 = fork()) < 0) {
		printf("Erro no fork 1\n");
		exit(1);
	}
	
	else if(pid1 == 0) {
		execv("Pwriter2", NULL);
	}
	else {
		if((pid2=fork()) < 0) {
			printf("Erro no fork 1\n");
			exit(1);
		}
		else if(pid2 == 0) {
			execv("Preader2", NULL);
		}
		
			else {

				vp[0] = pid1;
				vp[1] = pid2;
				
				kill(pid1, SIGSTOP);
				kill(pid2, SIGSTOP);
				
				while(1) {
				
					kill(vp[0], SIGCONT);
					sleep(1);
					kill(vp[0], SIGSTOP);
					
					kill(vp[1], SIGCONT);
					sleep(1);
					kill(vp[1], SIGSTOP);				
				}

			}
		}
	
	return 0;
}

Pwriter2:

#include<sys/ipc.h> 
#include<sys/shm.h>
#include<sys/stat.h>
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>

int main (void){
 
	int seg1; 
	int *m1;
	int i = 5;
	
	seg1 = shmget (8800, sizeof(int), IPC_CREAT |  S_IRUSR | S_IWUSR);
	 
	if(seg1 == -1) {
		   printf("Erro\n");
		   exit(1);
	}
	
	m1 = (int *) shmat (seg1, 0, 0);
	(*m1) = i;
	i++;

	return 0;
}

Preader2:

#include<sys/ipc.h> 
#include<sys/shm.h>
#include<sys/stat.h>
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>

int main (void){ 
	int seg1;
	int *m1;
	int  i = 1;
	seg1 = shmget (8800, sizeof(int), S_IRUSR | S_IWUSR);
	
	if(seg1 == -1) {
		printf("Erro\n");
		exit(1);
	}
	
	// associa a memória compartilhada ao processo
	m1 = (int *) shmat (seg1, 0, 0);
	
	while(1){
		printf("%d\n",(*m1)*i);
		sleep(1);
		i++;
	}
	
		
	// libera a memória compartilhada do processo
	shmdt (m1);

	// libera a memória compartilhada
	shmctl (seg1, IPC_RMID, 0); 

	return 0;
}



-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -Wall -o Preader2 Preader2.c
$ gcc -Wall -o Pwriter2 Pwriter2.c
$ gcc -Wall -o ex3 ex3.c
$ ./ex3

-----------------------------------------------------
RESULTADO

5
10
15
20
25
30
35
40
45
50
55
60
continua...



-----------------------------------------------------
CONCLUSÃO

	Já que a questão 2 não foi concluída corretamente, resolvemos aplicar a estratégia do ex1, criando um programa gerenciador para passar os sinais de SIGSTOP e SIGCONT a cada um dos programas auxiliares.
	Entretanto, talvez pelo mesmo problema do ex2, não conseguimos atualizar através do Pwriter2 o valor da memória compartilhada.
	O resultado para o Preader2 encontra-se correto imprimindo as sequencias a partir do primeiro valor em memória (*m1 = 5).

